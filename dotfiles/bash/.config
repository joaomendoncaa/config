# Load env vars if they exist
if [ -f "$BASH_CONFIG_DIR/.env" ]; then
    export $(grep -v '^#' "$BASH_CONFIG_DIR/.env" | xargs)
fi

export BUN_INSTALL="$HOME/.bun"
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
export EDITOR='nvim'
export VISUAL='nvim'
export NVIM_AI=1
export NVIM_THEME=kanagawa-paper

HISTCONTROL=ignoreboth
HISTSIZE=1000
HISTFILESIZE=2000

shopt -s histappend
shopt -s checkwinsize
set -o vi

function gi() { 
    curl -sL "https://www.toptal.com/developers/gitignore/api/$@"
}

function add_to_path() {
    if [[ ":$PATH:" != *":$1:"* ]]; then
        export PATH="$1:$PATH"
    fi
}

# Make less more friendly for non-text input files
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# Chroot config
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# Terminal color support
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
        color_prompt=yes
    else
        color_prompt=
    fi
fi

# Set prompt
if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# xterm title
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# Enable color support for ls and grep
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# Common aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'
alias c='clear'
alias r='reset'
alias bat='batcat'
alias fd='fdfind'
alias gg='lazygit'
alias lzd='lazydocker'
alias lab='cd ~/lab'
alias config='cd ~/lab/config'
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'
alias bfg='java -jar ~/bin/bfg.jar'

# Platform detection and specific settings
if grep -q "WSL" /proc/version 2>/dev/null; then
    export BROWSER=wslview
    # WSL-specific prompt command for Windows Terminal
    PROMPT_COMMAND=${PROMPT_COMMAND:+"$PROMPT_COMMAND; "}'printf "\e]9;9;%s\e\\" "$(wslpath -w "$PWD")"'
else
    export BROWSER=xdg-open
fi

# Bash completion
if ! shopt -oq posix; then
    if [ -f /usr/share/bash-completion/bash_completion ]; then
        . /usr/share/bash-completion/bash_completion
    elif [ -f /etc/bash_completion ]; then
        . /etc/bash_completion
    fi
fi


add_to_path "/opt/nvim-linux64/bin"
add_to_path "/mnt/c/Users/joao/AppData/Local/Programs/cursor/resources/app/bin"
add_to_path "$BUN_INSTALL/bin"
add_to_path "$HOME/go/bin"
add_to_path "/home/joao/.local/share/solana/install/active_release/bin"
export PNPM_HOME="/home/joao/.local/share/pnpm"

case ":$PATH:" in
    *":$PNPM_HOME:"*) ;;
    *) export PATH="$PNPM_HOME:$PATH" ;;
esac

[ -f "$HOME/.cargo/env" ] && . "$HOME/.cargo/env"

command -v starship >/dev/null && eval "$(starship init bash)"

if command -v atuin >/dev/null; then
    [[ -f ~/.bash-preexec.sh ]] && source ~/.bash-preexec.sh
    eval "$(atuin init bash)"
    [ -f "$HOME/.atuin/bin/env" ] && . "$HOME/.atuin/bin/env"
fi

# Zoxide config
# Utility functions for zoxide
function __zoxide_pwd() {
    \builtin pwd -L
}

function __zoxide_cd() {
    # shellcheck disable=SC2164
    \builtin cd -- "$@"
}

# Hook configuration for zoxide
__zoxide_oldpwd="$(__zoxide_pwd)"

function __zoxide_hook() {
    \builtin local -r retval="$?"
    \builtin local pwd_tmp
    pwd_tmp="$(__zoxide_pwd)"
    if [[ ${__zoxide_oldpwd} != "${pwd_tmp}" ]]; then
        __zoxide_oldpwd="${pwd_tmp}"
        \command zoxide add -- "${__zoxide_oldpwd}"
    fi
    return "${retval}"
}

# Initialize hook
if [[ ${PROMPT_COMMAND:=} != *'__zoxide_hook'* ]]; then
    PROMPT_COMMAND="__zoxide_hook;${PROMPT_COMMAND#;}"
fi

__zoxide_z_prefix='z#'

# Jump to a directory using only keywords
function __zoxide_z() {
    # shellcheck disable=SC2199
    if [[ $# -eq 0 ]]; then
        __zoxide_cd ~
    elif [[ $# -eq 1 && $1 == '-' ]]; then
        __zoxide_cd "${OLDPWD}"
    elif [[ $# -eq 1 && -d $1 ]]; then
        __zoxide_cd "$1"
    elif [[ ${@: -1} == "${__zoxide_z_prefix}"?* ]]; then
        # shellcheck disable=SC2124
        \builtin local result="${@: -1}"
        __zoxide_cd "${result:${#__zoxide_z_prefix}}"
    else
        \builtin local result
        # shellcheck disable=SC2312
        result="$(\command zoxide query -- "$@")" &&
            __zoxide_cd "${result}"
    fi
}

# Jump to a directory using interactive search
function __zoxide_zi() {
    \builtin local result
    result="$(\command zoxide query --interactive -- "$@")" && __zoxide_cd "${result}"
}

# Custom cd command with zoxide
\builtin unalias cd &>/dev/null || \builtin true
function cd() {
    __zoxide_z "$@"
}

\builtin unalias cdi &>/dev/null || \builtin true
function cdi() {
    __zoxide_zi "$@"
}


# Load local settings if they exist
if [ -f "$BASH_CONFIG_DIR/.bash_local" ]; then
    source "$BASH_CONFIG_DIR/.bash_local"
fi
