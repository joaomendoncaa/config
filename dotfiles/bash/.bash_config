# If not running interactively, don't do anything
case $- in
*i*) ;;
*) return ;;
esac

HISTCONTROL=ignoreboth
HISTSIZE=1000
HISTFILESIZE=2000

shopt -s histappend
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
	debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
xterm-color | *-256color) color_prompt=yes ;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
	if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
		# We have color support; assume it's compliant with Ecma-48
		# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
		# a case would tend to support setf rather than setaf.)
		color_prompt=yes
	else
		color_prompt=
	fi
fi

function gi() { curl -sL https://www.toptal.com/developers/gitignore/api/$@; }

if [ "$color_prompt" = yes ]; then
	PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
	PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm* | rxvt*)
	PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
	;;
*) ;;

esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
	test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
	alias ls='ls --color=auto'
	#alias dir='dir --color=auto'
	#alias vdir='vdir --color=auto'

	alias grep='grep --color=auto'
	alias fgrep='fgrep --color=auto'
	alias egrep='egrep --color=auto'
fi

alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'
alias c='clear'
alias r='reset'
alias lg='lazygit "$@"'
alias lzd='lazydocker "$@"'
alias lab='cd ~/lab'
alias config='cd ~/lab/config'
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

if [ -f ./.bash_aliases ]; then
	. ./.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
	if [ -f /usr/share/bash-completion/bash_completion ]; then
		. /usr/share/bash-completion/bash_completion
	elif [ -f /etc/bash_completion ]; then
		. /etc/bash_completion
	fi
fi

# Nvim
export PATH="/opt/nvim-linux64/bin:$PATH"

# bun
export BUN_INSTALL="$HOME/.bun"
export PATH="$BUN_INSTALL/bin:$PATH"

# Solana
export PATH="/home/joao/.local/share/solana/install/active_release/bin:$PATH"
export WALLET_KEYPAIR_ORE="/home/joao/.wallets/solana/ore-miner.json"
export RPC_MAINNET="https://rpc.ironforge.network/mainnet?apiKey=01HTNKSZ9FQG0X7SXTEC8N6QQK"

# pnpm
export PNPM_HOME="/home/joao/.local/share/pnpm"
case ":$PATH:" in
*":$PNPM_HOME:"*) ;;
*) export PATH="$PNPM_HOME:$PATH" ;;
esac
# pnpm end

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"                   # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion" # This loads nvm bash_completion
. "$HOME/.cargo/env"

# editor default
export EDITOR='nvim'
export VISUAL='nvim'
export BROWSER=wslview

# nvim settings
export NVIM_AI=1
export NVIM_THEME=default

# init starship
eval "$(starship init bash)"

[[ -f ~/.bash-preexec.sh ]] && source ~/.bash-preexec.sh
eval "$(atuin init bash)"

# =============================================================================
#
# Utility functions for zoxide.
#

# pwd based on the value of _ZO_RESOLVE_SYMLINKS.
function __zoxide_pwd() {
	\builtin pwd -L
}

# cd + custom logic based on the value of _ZO_ECHO.
function __zoxide_cd() {
	# shellcheck disable=SC2164
	\builtin cd -- "$@"
}

# =============================================================================
#
# Hook configuration for zoxide.
#

# Hook to add new entries to the database.
__zoxide_oldpwd="$(__zoxide_pwd)"

function __zoxide_hook() {
	\builtin local -r retval="$?"
	\builtin local pwd_tmp
	pwd_tmp="$(__zoxide_pwd)"
	if [[ ${__zoxide_oldpwd} != "${pwd_tmp}" ]]; then
		__zoxide_oldpwd="${pwd_tmp}"
		\command zoxide add -- "${__zoxide_oldpwd}"
	fi
	return "${retval}"
}

# Initialize hook.
if [[ ${PROMPT_COMMAND:=} != *'__zoxide_hook'* ]]; then
	PROMPT_COMMAND="__zoxide_hook;${PROMPT_COMMAND#;}"
fi

# =============================================================================
#
# When using zoxide with --no-cmd, alias these internal functions as desired.
#

__zoxide_z_prefix='z#'

# Jump to a directory using only keywords.
function __zoxide_z() {
	# shellcheck disable=SC2199
	if [[ $# -eq 0 ]]; then
		__zoxide_cd ~
	elif [[ $# -eq 1 && $1 == '-' ]]; then
		__zoxide_cd "${OLDPWD}"
	elif [[ $# -eq 1 && -d $1 ]]; then
		__zoxide_cd "$1"
	elif [[ ${@: -1} == "${__zoxide_z_prefix}"?* ]]; then
		# shellcheck disable=SC2124
		\builtin local result="${@: -1}"
		__zoxide_cd "${result:${#__zoxide_z_prefix}}"
	else
		\builtin local result
		# shellcheck disable=SC2312
		result="$(\command zoxide query --exclude "$(__zoxide_pwd)" -- "$@")" &&
			__zoxide_cd "${result}"
	fi
}

# Jump to a directory using interactive search.
function __zoxide_zi() {
	\builtin local result
	result="$(\command zoxide query --interactive -- "$@")" && __zoxide_cd "${result}"
}

# =============================================================================
#
# Commands for zoxide. Disable these using --no-cmd.
#

\builtin unalias cd &>/dev/null || \builtin true
function cd() {
	__zoxide_z "$@"
}

\builtin unalias cdi &>/dev/null || \builtin true
function cdi() {
	__zoxide_zi "$@"
}

# Load completions.
# - Bash 4.4+ is required to use `@Q`.
# - Completions require line editing. Since Bash supports only two modes of
#   line editing (`vim` and `emacs`), we check if either them is enabled.
# - Completions don't work on `dumb` terminals.
if [[ ${BASH_VERSINFO[0]:-0} -eq 4 && ${BASH_VERSINFO[1]:-0} -ge 4 || ${BASH_VERSINFO[0]:-0} -ge 5 ]] &&
	[[ :"${SHELLOPTS}": =~ :(vi|emacs): && ${TERM} != 'dumb' ]]; then
	# Use `printf '\e[5n'` to redraw line after fzf closes.
	\builtin bind '"\e[0n": redraw-current-line' &>/dev/null

	function __zoxide_z_complete() {
		# Only show completions when the cursor is at the end of the line.
		[[ ${#COMP_WORDS[@]} -eq $((COMP_CWORD + 1)) ]] || return

		# If there is only one argument, use `cd` completions.
		if [[ ${#COMP_WORDS[@]} -eq 2 ]]; then
			\builtin mapfile -t COMPREPLY < <(
				\builtin compgen -A directory -- "${COMP_WORDS[-1]}" || \builtin true
			)
		# If there is a space after the last word, use interactive selection.
		elif [[ -z ${COMP_WORDS[-1]} ]] && [[ ${COMP_WORDS[-2]} != "${__zoxide_z_prefix}"?* ]]; then
			\builtin local result
			# shellcheck disable=SC2312
			result="$(\command zoxide query --exclude "$(__zoxide_pwd)" --interactive -- "${COMP_WORDS[@]:1:${#COMP_WORDS[@]}-2}")" &&
				COMPREPLY=("${__zoxide_z_prefix}${result}/")
			\builtin printf '\e[5n'
		fi
	}

	\builtin complete -F __zoxide_z_complete -o filenames -- cd
	\builtin complete -r cdi &>/dev/null || \builtin true
fi

# eval "$(zoxide init bash)"
